// UVa 10020 - Minimal coverage
// by Rico Tiongson
// 06/10/16
#include <bits/stdc++.h>
using namespace std;
const int N = 100005;
int t, m, a[N], b[N], ans[N], ord[N];
bool cmp(int i, int j) {return a[i] < a[j];}
int main() {
	scanf("%d", &t);
	while (t--) {
		scanf("%d", &m);
		int n = 0;
		while (scanf("%d%d", &a[n], &b[n]) == 2 && (a[n] || b[n])) {
			++n;
		}
		for (int i = 0; i < n; ++i)
			ord[i] = i;
		sort(ord, ord + n, cmp);
		int cov = 0, size = 0;
		int L = INT_MIN, R = INT_MIN;
		for (int i = 0; i < n && cov < m; ++i) {
			int j = ord[i];
			if (a[j] > cov) {
				if (R < cov) {
					// cannot cover
					R = INT_MIN;
					break;
				}
				// cover using [L, R]
				ans[size++] = L;
				cov = R;
			}
			if (a[j] > cov) {
				R = INT_MIN;
				break;
			}
			if (b[j] > R) {
				R = b[j];
				L = j;
			}
		}
		if (cov < m && R >= cov) {
			ans[size++] = L;
			cov = R;
		}
		// static int tc = 0;
		// printf("%d: ", ++tc);
		if (cov < m) printf("0\n");
		else {
			printf("%d\n", size);
			for (int i = 0; i < size; ++i)
				printf("%d %d\n", a[ans[i]], b[ans[i]]);
		}
		if (t) printf("\n");
	}
}
